SSRF  ->  Server-Side Request Forgery

Types of SSRF:
	regular/basic SSRF  ->  where data is returned to the attacker's screen 
	Blind SSRF    		->  where an SSRF occurs, but no information is returned to the attacker's screen.

What's the impact:
	A successful SSRF attack can result in any of the following: 
		Access to unauthorised areas.
		Access to customer/organisational data.
		Ability to Scale to internal networks.
		Reveal authentication tokens/credentials.

Where:
	any parameter take url or link
	we use at the end & or &s or &s=
	.When a full URL is used in a parameter in the address bar:
		https://example.com/form?server=https://example2.com/store
								 ---------------------------------
	.A hidden field in a form:
	 crtl+f "type="hidden""

	 	<form>
		    <input type="hidden" name="server" value="http://server.website.thm/store">
		    	   ------------                --------------------------------------
		    <div>Your Name: </div>
		    <div><input name="client_name"></div>
		    <div>Your Email :< /div>
		    <div><input name="client_email"></div>
		    <div>Your Message:</div>
		    <div><textarea name="client_message"></textarea></div>
		</form>

	.A partial URL such as just the hostname:
		https://example.com/form?server=api
										---
	.Or perhaps only the path of the URL:
		https://example.com/form?dst=/forms/contant
								 ------------------

Defeating Common SSRF Defenses:
	1-localhost bypass
		You can bypass a Deny List by using alternative localhost references such as 0, 0.0.0.0, 0000, 127.1, 127.*.*.*,
		2130706433(long ip),017700000001 or subdomains that have a DNS record which resolves to the IP Address 127.0.0.1 such as 
		127.0.0.1.nip.io or spoofed.burpcollaborator.net
	2-sensitive URLs like /admin
		using URL Encoding
		using double URL Encoding
		try encoding or double encod first char,thecond char,..etc
	3-some tricks
		You can embed credentials in a URL before the hostname, using the @ character. For example:
			-> https://expected-host:fakepassword@evil-host
		You can use the # character to indicate a URL fragment. For example:
			-> https://evil-host#expected-host
		You can leverage the DNS naming hierarchy to place required input into a fully-qualified DNS name that you control. For example:
			-> https://expected-host.evil-host


	metadata
		Also, in a cloud environment, it would be beneficial to block access to the IP address 169.254.169.254, which contains metadata for the deployed cloud 
		server, including possibly sensitive information. An attacker can bypass this by registering a subdomain on their own domain with a DNS record that points 
		to the IP Address 169.254.169.254.

	Open Redirect
		If the above bypasses do not work, there is one more trick up the attacker's sleeve, the open redirect. An open redirect is an 
		endpoint on the server where the website visitor gets automatically redirected to another website address. Take, for example, 
		the link https://website.thm/link?url=https://tryhackme.com. This endpoint was created to record the number of times visitors 
		have clicked on this link for advertising/marketing purposes. But imagine there was a potential SSRF vulnerability with 
		stringent rules which only allowed URLs beginning with https://website.thm/. An attacker could utilise the above feature to 
		redirect the internal HTTP request to a domain of the attacker's choice.

Bypassing SSRF filters via open redirection:
	

requestbin.com